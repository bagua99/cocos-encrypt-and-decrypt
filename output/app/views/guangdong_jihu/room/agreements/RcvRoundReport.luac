--file: app.views.tuidao_two.room.agrements.RcvRoundReport
--desc: 收到牌局结束的消息报告界面
--
-- local _module = ...;
-- _module= string.gsub(_module,"%/","%.");
--记录一下模块名
local log = gt.log
--log("_model = ".._module.." _mod =".._mod);

local RcvRoundReport = class("RcvRoundReport", BaseRcvRoundReport)

function RcvRoundReport:ctor(  )
	RcvRoundReport.super.ctor(self)
end

function RcvRoundReport:onRcvRoundReport(msgTbl)

	--打印出消息   看什么时候接到消息
	gt.log("RcvRoundReport:onRcvRoundReport : -----------XXXX------")
	--设置玩家状态
	self.m_scene:roundEnd( )
	local room = self.m_scene:getRoom()
	--设置房间状态
	room:setRoomStatus(Room.Status.END)
	local players = room:getPlayers()
	local curRoomPlayers = clone(players)
	self.m_scene:setPlayMaAnimation(true)

	if msgTbl.m_successive == nil then
		print("没有收到m_successive MSG")
	else
		print("已经收到m_successive MSG :")
		local lens = #msgTbl.m_successive
		for i=1,lens do
			print('msgTbl.m_successive '.. msgTbl.m_successive[i])
			if players[i] and players[i].setSuccessCnt then
				players[i]:setSuccessCnt(msgTbl.m_successive[i])
				curRoomPlayers[i]:setSuccessCnt(msgTbl.m_successive[i])
				print("连庄次数写入成功.......")
			end
		end
	end


	local hitAll = msgTbl.m_nHorseHitAll;
	-- hitAll = 10;
	if(hitAll ==  0) then  
		if not msgTbl.m_bird_infos or #msgTbl.m_bird_infos < 1 then
			self:showRoundReport(msgTbl, curRoomPlayers)
			self.m_scene.haveMa = false
			return
		end
	end 

	self.m_scene.haveMa = true
	self.m_scene.horseHitAll =  msgTbl.m_nHorseHitAll;
	--local animaiNode = cc.Node:create()
	-- animaiNode:setAnchorPoint(cc.p(0.5, 0.5))
	local animaiNode = cc.Sprite:create("images/otherImages/zhongma/mapai_bg.png");
	animaiNode:setPosition(gt.winCenter)
	self.m_scene:addChild(animaiNode, Room.ZOrder.MAPAI)
	if(hitAll > 0 ) then --全中的情况，一马全中 
		print("全中: "..tostring(hitAll));

		local maNode = cc.Node:create();
		animaiNode:addChild(maNode);

		local titlestr = "images/otherImages/zhongma/z_all.png";
		local title = cc.Sprite:create(titlestr);
		if(title) then 
			maNode:addChild(title);
			title:setPosition(ccp(0,120));
		end 


		local labelXPos = 640;
		local labelYPos = 280;
		local label = ccui.TextAtlas:create(tostring(hitAll),"images/otherImages/zhongma/info_number.png",91,114,0);
		if(label) then 
			maNode:addChild(label);
			label:setPosition(ccp(labelXPos - 640,labelYPos - 360))
			local x = labelXPos - (label:getContentSize().width /2);

			local zhong = cc.Sprite:create("images/otherImages/zhongma/info_zhong.png");
			local zx =  x - zhong:getContentSize().width /2 +10;
			maNode:addChild(zhong);
			zhong:setPosition(ccp(zx- 640,labelYPos-360));

		
			x = labelXPos + (label:getContentSize().width /2);
			local ma = cc.Sprite:create("images/otherImages/zhongma/info_ma.png");
			local mx =  x + ma:getContentSize().width /2;
			maNode:addChild(ma);
			ma:setPosition(ccp(mx-640,labelYPos-360));
		end 

		maNode:setPosition(ccp(640,360));
		maNode:setScale(0.1);
		local scaleTo = cc.ScaleTo:create(0.5, 1.0) --cc.ScaleBy:create(1, 0.1, 2)
		local delayTime = cc.DelayTime:create(1.0)
		local callFunc = cc.CallFunc:create(function(sender)
			animaiNode:removeFromParent();
			self:showRoundReport(msgTbl, curRoomPlayers,0)
		end);
		local seqAction = cc.Sequence:create(scaleTo,delayTime, callFunc)
		maNode:runAction(seqAction)
		return;
	end 


	local list = msgTbl.m_bird_infos
	-- local posXList = {
	-- 	-- {0, 0},
	-- 	-- {-125, 125, -125, 125},
	-- 	-- {-200, 0, 200, -200, 0, 200},
	-- 	-- {-250, 250,-125, 125, -125, 125,-250, 250 }, -- 8
	-- 	{640,640}, -- 1
	-- 	{580,700,580,700}, -- 2
	--  	{520,640,760,520,640,760}, --3
	-- 	{460,580,700,820,460,580,700,820}, --4
	-- 	{400,520,640,760,880,400,520,640,760,880}, --5
	-- 	{340,460,580,700,820,940,340,460,580,700,820,940}, --6
	-- 	{280,400,520,640,760,880,1000,280,400,520,640,760,880,1000}, --7
	-- 	{220,340,460,580,700,820,940,1060,220,340,460,580,700,820,940,1060}, --8
	-- 	{160,280,400,520,640,760,880,1000,1120,160,280,400,520,640,760,880,1000,1120}, --9
	-- 	{100,220,340,460,580,700,820,940,1060,1180,100,220,340,460,580,700,820,940,1060,1180}, --10

	-- }

	-- local posYList= {
	-- 	275,
	-- 	430,
	-- };


	local zmNumber = 0;
	for _,v in ipairs(list) do 
		if((v[1]  + 1) ==  self.m_scene:getRoom():getMainSeatIdx()) then
			zmNumber = zmNumber + 1;
		end 
	end
	print("中马: "..tostring(zmNumber));

	local function addZMTitle()
		local titlestr = "images/otherImages/zhongma/zm_" ..tostring(zmNumber)..".png";
		print("addZMTitle" ..titlestr);
		local title = cc.Sprite:create(titlestr);
		if(title) then 
			animaiNode:addChild(title);
			title:setPosition(ccp(640,640));
		end 
	end

	if(zmNumber > 0) then 
		addZMTitle();
		print("添加 title end");
	end 
	
	-- local posX = nil
	-- local posY = 104
	local  MAX_ONE_LINE = 14
	local len = #list

	local hasLen = math.ceil(len /MAX_ONE_LINE);
	-- if len < 3 then
	-- 	if len == 1 then
	-- 		posY = 0
	-- 	end
	-- 	posX = posXList[1]
	-- elseif len < 5 then
	-- 	posX = posXList[2]
	-- elseif len < 7 then 
	-- 	posX = posXList[3]
	-- elseif len < 9 then 
	-- 	posX = posXList[4]
	-- end
	 --local xList= posXList[math.ceil (len/hasLen)];

	 local delimitWidth = 75;
	 local centerPosX = 640;
	-- local centerPosY_1 = 430;
	-- local centerPosY_2 = 275;
	--local x0 = math.ceil(len/2) * delimitWidth
	local offset = 0;
	local stType = math.floor(len/hasLen)%2;
	if(stType == 1) then --单个
		offset = 0;
	else --双的
		offset = 60;
	end 

	local function _findPosX(index)
		local vLineLen = (math.floor( index /MAX_ONE_LINE) + 1) *MAX_ONE_LINE;
		print("vLineLen: "..vLineLen);
		local vTrueLen = MAX_ONE_LINE;
		offset = 60;
		if(vLineLen > len) then
			vTrueLen = MAX_ONE_LINE - (vLineLen - len)
			local stType = vTrueLen%2;
			if(stType == 1) then --单个
				offset = 0;
			else --双的
				offset = 60;
			end
		end 
		print("vTrueLen: "..vTrueLen);
		local x0 = centerPosX - delimitWidth * math.floor( vTrueLen/2)+ offset;
		print("index: ".. index .. ' x0: '..x0);
		return x0;
	end 
	local y0 = 475;
	--local x0 = centerPosX - delimitWidth * math.floor(math.floor( len/hasLen) /2)+ offset;

	local function posAt(key)
		local index = key - 1
		print("posAt "..index);
		local x0 = _findPosX(index);
		local xIndex = index %MAX_ONE_LINE;
		local column = xIndex; --math.floor(xIndex /2);
		local line = math.floor(index / MAX_ONE_LINE) + 1;		
		print("col:  "..column);
		print("line: "..line);
		print("pos: "..tostring(x0 + column* delimitWidth) ..' '..tostring(y0 - 120 * (line - 1)));
		return ccp(x0 + (column)* delimitWidth, y0 - 120 * (line - 1) )
	end


	local function getAnimation( _pos, _callFunc )
		local scaleTo = cc.ScaleTo:create(0.5, 1.0) --cc.ScaleBy:create(1, 0.1, 2)
		local moveTo = cc.MoveTo:create(0.8, _pos)
		local delayTime = cc.DelayTime:create(0.8)
		local fadeOut = cc.FadeOut:create(1.3)		
		if _callFunc then
			local callFunc = cc.CallFunc:create(_callFunc)
			return cc.Sequence:create(scaleTo, moveTo, delayTime, fadeOut, callFunc)
		else
			return cc.Sequence:create(scaleTo, moveTo, delayTime, fadeOut)
		end
	end

	for i,v in ipairs(list) do
		local mjTileName = string.format("p4s%d_%d.png", v[2][1], v[2][2])
		local mjTileSpr = cc.Sprite:createWithSpriteFrameName(mjTileName)
		mjTileSpr:setAnchorPoint(cc.p(0.5, 0.5))
		mjTileSpr:setPosition(cc.p(640, 360))
		mjTileSpr:setScale(0.1)
		mjTileSpr:setCascadeOpacityEnabled(true);		
		if((v[1]  + 1) ==  self.m_scene:getRoom():getMainSeatIdx())  then 
			local lightSpr = cc.Sprite:create("images/otherImages/zhongma/mapai_light.png");
			mjTileSpr:addChild(lightSpr);
			local sz = mjTileSpr:getContentSize();
			lightSpr:setPosition(ccp(sz.width/2,sz.height/2));
		end 

		animaiNode:addChild(mjTileSpr)
		--local pos = cc.p(posX[k], (k > (#msgTbl.m_bird_infos / 2) and posY) or -posY) 
		local pos = posAt(i);
		if i == len then
			mjTileSpr:runAction(getAnimation(pos, function( )
				animaiNode:removeFromParent()
				self:showRoundReport(msgTbl, curRoomPlayers,0)
			end))
		else
			mjTileSpr:runAction(getAnimation(pos))
		end
	end
end

--显示牌局界面
--
function RcvRoundReport:showRoundReport( msgTbl, curRoomPlayers,imme)
	gt.log("showRoundReport")
	imme = imme or  1.3;
	--弹出结算界面
	local room = self.m_scene:getRoom()
	local players = room:getPlayers()
	local allDelayTimy = imme

	local delayTime = cc.DelayTime:create(allDelayTimy)
	local callFunc = cc.CallFunc:create(function(sender)
		self.m_scene:setPlayMaAnimation(false)
		
		local csbLayer = self.m_scene:getCsbLayer()
		-- 显示准备按钮
		local readyBtn = gt.seekNodeByName(csbLayer, "Btn_ready")
		-- readyBtn:setVisible(true)

		-- 停止未完成动作
		self.m_scene:clearAnimation()

		-- 停止倒计时音效
		self.m_scene.playTimeCD = nil

		-- 移除所有麻将
		-- local mahjongNode = self.m_scene:getMahjongNode()
		-- mahjongNode:removeAllChildren()
		self.m_scene:cleanAllMahjong()

		-- 玩家准备手势隐藏
		self.m_scene:hideReadySign()

		-- 隐藏座次标识
		local turnPosBgSpr = gt.seekNodeByName(csbLayer, "Spr_turnPosBg")
		turnPosBgSpr:setVisible(false)

		-- 隐藏牌局状态
		local roundStateNode = gt.seekNodeByName(csbLayer, "Node_roundState")
		roundStateNode:setVisible(false)

		-- 隐藏倒计时
		self.m_scene.playTimeCDLabel:setVisible(false)

		-- 隐藏出牌标识
		self.m_scene.m_outMjtileSignNode:setVisible(false)

		-- 隐藏决策
		local decisionNode = self.m_scene:getDecisionNode()
		decisionNode:removeAllChildren()

		--移除特效
		if self.m_scene.huAnimateNode then
			self.m_scene.huAnimateNode:removeFromParent()
			self.m_scene.huAnimateNode = nil
		end

		--隐藏鬼牌标识
		self.m_scene:initGhost()

		--翻鬼清除鬼数据
		if self.m_scene.m_ghost_type and self.m_scene.m_ghost_type ~= 8 then
			self.m_scene:getRoom():cleanGui()
		end

		--设置分数
		if msgTbl.m_end == 0 then
			table.foreach(room:getPlayers(), function(seatIdx, player)
				player:setScore(player:getScore() + msgTbl.m_score[seatIdx])
			end)
		end
		
		local roundReport =  Tools.requireFile("RoundReport", self.m_scene:getGameType(), Tools.BASE_TYPE.ROOM)
		-- 弹出局结算界面
		--local roundReport = import("..RoundReport",_module):create();
		roundReport:init(curRoomPlayers, room:getMainSeatIdx(), msgTbl, msgTbl.m_end)
		self.m_scene:setPlayMaAnimation(false)
		self.m_scene:addChild(roundReport, Room.ZOrder.ROUND_REPORT)

	end)

	local seqAction = cc.Sequence:create(delayTime, callFunc)
	self.m_scene:runAction(seqAction)
end


return RcvRoundReport